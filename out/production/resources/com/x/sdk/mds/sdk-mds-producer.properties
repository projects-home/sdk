bootstrap.servers=172.16.8.27:19092,172.16.8.39:19092,172.16.8.31:19092
key.serializer=org.apache.kafka.common.serialization.StringSerializer
value.serializer=org.apache.kafka.common.serialization.ByteArraySerializer
partitioner.class=org.apache.kafka.clients.producer.internals.DefaultPartitioner
acks=1
#生产者等待发送到kafka的消息队列占用内容的大小。如果消息发送的速度比传输给kafka快，生产者会在抛出异常后，阻塞max.block.ms的时间。这个配置应该大体与生产者用到的内存差不多，
# 但不全是，因为生产者使用的内存不全部用于消息队列。还有些内存会被用于压缩和保持长连接。
buffer.memory=33554432
#在send（）调用返回后，报告成功或失败时间的上限。这限制了发送前记录将被延迟的总时间、等待代理确认的时间（如果预期的话）以及允许可重试发送失败的时间。如果遇到不可恢复的错误，
# 重试次数已用尽，或者将记录添加到到达较早交货截止日期的批中，生产商可能会报告未能在此配置之前发送记录。此配置的值应大于或等于request.timeout.ms和linger.ms的总和。
delivery.timeout.ms=120000
#消息延迟发送的毫秒数，目的是为了等待多个消息，在同一批次发送，减少网络请求。
linger.ms=0
#生产者发送消息后等待响应的最大时间，如果在配置时间内没有得到响应，生产者会重试。
request.timeout.ms=30000
#配置为大于0的值的话，客户端会在消息发送失败时重新发送。重试等同于在发送有异常时重新发送消息。如果不把max.in.flight.requests.per.connection设为1，重试可能会改变消息的
# 顺序。两条消息同时发送到同一个分区，第一条失败了，并在第二条发送成功后重新发送，那么第二条消息可能在第一条消息前到达。
retries=3
max.in.flight.requests.per.connection=1
#生产者一次请求的最大字节数
max.request.size=1048576
#当多条消息需要发送到同一个分区时，生产者会尝试合并网络请求。这会提高client和生产者的效率。如果消息体大于这个配置，生产者不会尝试发送消息。发送给kafka的消息包含不同的批次，
#每批发送给一个分区。批次大小太小的话可能会降低吞吐量。如果设为0，会禁用批处理功能。如果批次设置很大，可能会有些浪费内存，因为我们会预留这部分内存用于额外的消息
batch.size=16384

maxProducer=5
mds.topic=bmc_kafka